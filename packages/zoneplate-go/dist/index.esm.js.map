{"version":3,"file":"index.esm.js","sources":["../lib/index.js"],"sourcesContent":["/* global WebAssembly fetch */\n\n// These exported symbols are mutated once the WASM is asynchronously loaded\nexport let renderGo\n\n// tinygo has memory issues...\nconst tiny = false\nconst wasmFile = `/wasm-go/${tiny ? 'tinygo' : 'main'}.wasm`\n\nexport async function importWasm () {\n  if (tiny) {\n    await import('./wasm-go/wasm_exec_tinygo_fixed.js')\n  } else {\n    await import('./wasm-go/wasm_exec_fixed.js')\n  }\n\n  // prevent from running on server for now\n  if (typeof window !== 'undefined') {\n    // console.log('global.Go is a ', typeof window.Go)\n    const go = new window.Go()\n\n    let wasm\n    if ('instantiateStreaming' in WebAssembly) {\n      wasm = await WebAssembly.instantiateStreaming(fetch(wasmFile), go.importObject)\n    } else { // for Safari....\n      const resp = await fetch(wasmFile)\n      const bytes = await resp.arrayBuffer()\n      wasm = await WebAssembly.instantiate(bytes, go.importObject)\n    }\n\n    //  run the go instance\n    go.run(wasm.instance)\n\n    // This is our mutable exported symbol\n    // console.log('window.DrawGo is a ', typeof window.DrawGo)\n    renderGo = window.DrawGo\n\n    console.log('imported Go WASM')\n  } else {\n    console.log('skipped importing Go WASM')\n  }\n}\nimportWasm()\n"],"names":["importWasm","renderGo","window","wasm","go","run","instance","DrawGo","console","log","Go","WebAssembly","instantiateStreaming","fetch","wasmFile","importObject","resp","arrayBuffer","bytes","instantiate","tiny","import"],"mappings":"AASsBA,IANXC,EAMWD,sDAQE,oBAAXE,YAILC,eAUJC,EAAGC,IAAIF,EAAKG,UAIZL,EAAWC,OAAOK,OAElBC,QAAQC,IAAI,qBAlBNL,EAAK,IAAIF,OAAOQ,KAGlB,yBAA0BC,4BACfA,YAAYC,qBAAqBC,MAAMC,GAAWV,EAAGW,gCAAlEZ,sBAEmBU,MAAMC,kBAAnBE,0BACcA,EAAKC,6BAAnBC,0BACOP,YAAYQ,YAAYD,EAAOd,EAAGW,gCAA/CZ,yCAYFK,QAAQC,IAAI,4EA7BVW,kBACIC,OAAO,4EAEPA,OAAO,qGAJjB,oCAHMD,GAAO,EACPN,uBAmCNd"}